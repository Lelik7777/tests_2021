console.log('%citerable objects', 'color:blue;font-size:1.2rem');
// —Å–æ–∑–¥–∞–µ–º –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç
//—É —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ range –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ next(),–∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É –æ–±—ä–µ–∫—Ç–∞ –∏—Ç–µ—Ä–∞—Ç–æ—Ä
//–∑–¥–µ—Å—å –º—ã —Ä–∞–∑–¥–µ–ª—è–µ–º –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä
const range = {
    from: 1,
    to: 5,
};
range[Symbol.iterator] = function () {
    return {
        current: this.from,
        last: this.to,
        next() {
            if (this.current <= this.last) {
                return {done: false, value: this.current++}
            } else {
                return {done: true};
            }
        }
    }
}
for (const rangeElement of range) {
    console.log(rangeElement)
}
//–º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å next()–ø—Ä—è–º–æ —É –æ–±—ä–µ–∫—Ç–∞ range –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∫–æ–¥–∞,—Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ [Symbol.iterator] –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
//–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é,–∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –∏–∑–º–µ–Ω—è—Ç—å –≤ –º–µ—Ç–æ–¥–µ next()
const range2 = {
    from: 1,
    to: 4,
    [Symbol.iterator]() {
        this.current = this.from;
        return this;
    },
    next() {
        // if (this.current <= this.to) {
        //     return {done: false, value: this.current++}
        // } else {
        //     return {done: true};
        // }
        // the same but by ternary operator
        return this.current <= this.to ? {done: false, value: this.current++} : {done: true};
    }
}
for (const number of range2) {
    console.log(number)
}

//–º–æ–∂–Ω–æ –æ–±–æ–π—Ç–∏—Å—å –∏ –±–µ–∑ —Ü–∏–∫–ª–∞ for...of , –ø—Ä–æ–≥–Ω–∞–≤ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ —Ü–∏–∫–ª while
let iter=range[Symbol.iterator]();
let res=null;
while (true){
    res=iter.next();
    if(res.done) break;
    console.log(res.value);
}

//–ê –≤–æ—Ç –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤–æ–º, –Ω–æ –µ–≥–æ –Ω–µ–ª—å–∑—è –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:

    let arrayLike = { // –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å—ã –∏ —Å–≤–æ–π—Å—Ç–≤–æ length => –ø—Å–µ–≤–¥–æ–º–∞—Å—Å–∏–≤
        0: "Hello",
        1: "World",
        length: 2
    };

console.log(arrayLike);
console.log(Array.from(arrayLike))
console.log(Array.from(range))
//–ø—Ä–µ–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø—Å–µ–≤–¥–æ–ø–∞—Ä–∞–º–∏ –≤ –º–∞—Å—Å–∏–≤
let str = 'ùí≥üòÇ';
let pseudoPair='üòÇ';
console.log(Array.from(pseudoPair))
console.log(pseudoPair)
console.log(JSON.stringify(str));
console.log(Array.from(str));
//—Ç–∞–∫–∂–µ —è –º–æ–≥—É –≤ –º–∞—Å—Å–∏–≤ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –æ–±—ã—á–Ω—É—é —Å—Ç–æ–∫—É —ç—Ç–∏–º–∏ –¥–≤—É–º—è –º–µ—Ç–æ–¥–∞–º–∏
console.log(Array.from('hello world'));
console.log('hello'.split(''));
//—ç—Ç–æ –¥–æ–∫–∞–∑—ã–≤–∞–µ—Ç,—á—Ç–æ —Å—Ç—Ä–æ–∫–∏ - —ç—Ç–æ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã–µ –æ–±—ä–µ–∫—Ç—ã
const iterString='hello'[Symbol.iterator]();
while (true){
    let res=iterString.next();
    if(res.done) break;
    console.log(res.value);
}